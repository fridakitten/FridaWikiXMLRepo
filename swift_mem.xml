<hierachie>
  <section name="Memory Management in Swift">
      <text content="Memory management is crucial in Swift to ensure efficient use of resources and prevent memory leaks. Swift uses Automatic Reference Counting (ARC) to track and manage an app's memory usage, especially for class instances." type="0"/>
  </section>
  <section name="Automatic Reference Counting (ARC)">
      <text content="ARC is a system in Swift that automatically handles memory management by tracking the references to each class instance. When an instance is no longer referenced, ARC deallocates it, freeing up memory." type="0"/>
      <text content="// Example:\nclass Person {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n}\nvar person1: Person? = Person(name: \"John\")\nperson1 = nil  // ARC deallocates the Person instance as there are no strong references." type="1"/>
  </section>
  <section name="Strong, Weak, and Unowned References">
      <text content="Swift provides three types of references—strong, weak, and unowned—to manage ownership of instances and prevent memory leaks:\n- **Strong References**: The default; keeps a strong hold on the instance, preventing it from being deallocated.\n- **Weak References**: Allows references without strong ownership, useful to prevent strong reference cycles, especially in delegate patterns.\n- **Unowned References**: Similar to weak references but assumes the reference will always have a value, often used in parent-child relationships." type="0"/>
      <text content="// Example:\nclass Apartment {\n    weak var tenant: Person?\n}\n" type="1"/>
  </section>
  <section name="Strong Reference Cycles">
      <text content="A strong reference cycle occurs when two or more instances hold strong references to each other, preventing ARC from deallocating them. This often happens in situations where classes mutually reference each other. Swift offers solutions such as weak and unowned references to break these cycles." type="0"/>
  </section>
  <section name="Resolving Strong Reference Cycles with Closures">
      <text content="Closures can also create strong reference cycles by capturing 'self' strongly. Swift allows developers to use capture lists to break these cycles, ensuring that closures don’t hold strong references unnecessarily." type="0"/>
      <text content="// Example:\nclass ViewController {\n    var closure: (() -> Void)?\n\n    func setupClosure() {\n        closure = { [weak self] in\n            print(self?.description ?? \'No self\')\n        }\n    }\n}" type="1"/>
  </section>
  <section name="Summary of Memory Management">
      <text content="Memory management in Swift relies on ARC, which is efficient but requires careful use of references to prevent leaks. Understanding strong, weak, and unowned references is essential for efficient and safe memory management in Swift applications." type="0"/>
  </section>
</hierachie>
